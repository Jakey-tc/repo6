<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

		<!-- 设置不被拦截的页面 -->
		<http pattern="/mylogin.html" security="none"></http>
		<http pattern="/error.html" security="none"></http>
		
		<!-- 创建拦截规则 -->
		<!-- use-expressions默认为true，表示使用SPEL表达式，此时access中要使用hasRole('ROLE_USER') -->
		<http use-expressions="false">
		
			<!-- 创建角色以及该角色能够访问的资源，
			intercept-url表示能访问的资源，/*表示该目录下的资源（不包括子目录下的资源）。/**表示该目录下的所有资源。
			access指定该角色名，不使用SPEL表达式时的写法是ROLE_角色名。
			 -->
			<intercept-url pattern="/**" access="ROLE_USER" />
			<!-- 开启表单登录功能，单独使用form-login标签时，spring-security框架会给我们自动创建一个登录页面，用作测试 -->
			<!-- 使用login-page指定我们自己的登录页面，authentication-failure-url指定登录失败的页面，default-target-url指定登录成功页面 -->
			<form-login default-target-url="/index.html" authentication-failure-url="/error.html" login-page="/mylogin.html"/>
			<!-- 关闭csrf认证，由于是html页面没有csrf认证，所以要关闭。csrf是spring-security的一个安全认证机制 -->
			<csrf disabled="true"/>
		</http>
		
		<!-- 认证管理器 -->
		<authentication-manager>
			<authentication-provider>
				<user-service>
					<!-- 创建一个用户，指定它的角色
						即该用户可以访问USER角色能访问的页面
					 -->
					<user name="admin" password="123456" authorities="ROLE_USER"/>
				</user-service>
			</authentication-provider>
		</authentication-manager>
</beans:beans>